package nb

import (
	"github.com/go-voice/voice"
)

// g711 are codecs in the ITU-T g711 specification
type g711 struct{}

func (g711) DecodeBlockSize() int { return 0 }
func (g711) DecodedLen(n int) int { return n }
func (g711) EncodeBlockSize() int { return 0 }
func (g711) EncodedLen(n int) int { return n }
func (g711) Format() voice.Format { return voice.Format{Channels: 1, Rate: 8000} }
func (g711) Reset()               {}

// aLaw is an A-Law codec
type aLaw struct{ g711 }

// ALaw returns a ITU-T G.711 compatible A-law waveform speech coder at 64 kbit/s.
func ALaw() Codec {
	return aLaw{}
}

func (codec aLaw) Encode(dst []byte, src []int16) error {
	if err := checkEncodeBounds(codec, dst, src); err != nil {
		return err
	}
	var (
		srcLen = len(src)
		dstLen = len(dst)
	)
	if srcLen == 0 && dstLen == 0 {
		return nil
	}
	for offset, sample := range src {
		dst[offset] = aLawEncodeTable[(sample>>3)+0x1000]
	}
	return nil
}

func (codec aLaw) Decode(dst []int16, src []byte) error {
	if err := checkDecodeBounds(codec, dst, src); err != nil {
		return err
	}
	var (
		srcLen = len(src)
		dstLen = len(dst)
	)
	if srcLen == 0 && dstLen == 0 {
		return nil
	}
	for offset, value := range src {
		dst[offset] = aLawDecodeTable[value]
	}
	return nil
}

// µLaw is an µ-law codec
type µLaw struct{ g711 }

// MLaw returns a ITU-T G.711 compatible µ-Law waveform speech coder at 64 kbit/s.
func MLaw() Codec {
	return µLaw{}
}

func (codec µLaw) Encode(dst []byte, src []int16) error {
	if err := checkEncodeBounds(codec, dst, src); err != nil {
		return err
	}
	var (
		srcLen = len(src)
		dstLen = len(dst)
	)
	if srcLen == 0 && dstLen == 0 {
		return nil
	}
	for offset, sample := range src {
		dst[offset] = µLawEncodeTable[(sample>>2)+0x2000]
	}
	return nil
}

func (codec µLaw) Decode(dst []int16, src []byte) error {
	if err := checkDecodeBounds(codec, dst, src); err != nil {
		return err
	}
	var (
		srcLen = len(src)
		dstLen = len(dst)
	)
	if srcLen == 0 && dstLen == 0 {
		return nil
	}
	for offset, value := range src {
		dst[offset] = µLawDecodeTable[value]
	}
	return nil
}

var (
	aLawEncodeTable = mustDecompress([]byte{
		0x1f, 0x8b, 0x08, 0x08, 0xc7, 0x1d, 0x63, 0x5c, 0x02, 0x03, 0x61, 0x6c,
		0x61, 0x77, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x00, 0xc5, 0xc1,
		0x43, 0x60, 0x18, 0x00, 0x0c, 0x00, 0xc0, 0xd9, 0xb6, 0xcd, 0xce, 0xf6,
		0x56, 0x77, 0xab, 0x6d, 0xcc, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xb3, 0xb6,
		0xed, 0xce, 0xb6, 0xbd, 0xe5, 0x91, 0x57, 0x3e, 0x79, 0xe4, 0x91, 0x3b,
		0x03, 0x03, 0x5d, 0x2d, 0x94, 0x35, 0x53, 0xd6, 0x5c, 0x59, 0x6b, 0x65,
		0x6d, 0x94, 0xb5, 0x54, 0xd6, 0x4a, 0x59, 0x03, 0x65, 0x0d, 0x95, 0xd5,
		0x53, 0x56, 0x5f, 0x59, 0x13, 0x65, 0x4d, 0x95, 0x35, 0x52, 0xd6, 0x58,
		0x59, 0x77, 0xa1, 0x1e, 0x42, 0x5d, 0x85, 0xba, 0x09, 0xf5, 0x16, 0xea,
		0x23, 0xd4, 0x53, 0xa8, 0x97, 0x50, 0x7b, 0xa1, 0x0e, 0x42, 0x6d, 0x85,
		0xda, 0x09, 0x75, 0x16, 0xea, 0x22, 0xd4, 0x51, 0xa8, 0x93, 0x50, 0x09,
		0x46, 0x49, 0x46, 0x31, 0x46, 0x71, 0x46, 0x19, 0x46, 0x59, 0x46, 0x29,
		0x46, 0x69, 0x46, 0x01, 0x46, 0x41, 0x46, 0x3e, 0x46, 0x7e, 0x46, 0x11,
		0x46, 0x51, 0x46, 0x21, 0x46, 0x61, 0x46, 0x0d, 0xa2, 0x26, 0x51, 0x8d,
		0xa8, 0x4e, 0xd4, 0x21, 0xea, 0x12, 0xb5, 0x88, 0xda, 0x44, 0x05, 0xa2,
		0x22, 0x51, 0x8e, 0x28, 0x4f, 0x54, 0x21, 0xaa, 0x12, 0x95, 0x88, 0xca,
		0xc4, 0x48, 0x34, 0x0a, 0x0d, 0x47, 0x23, 0xd0, 0x58, 0x34, 0x0e, 0x8d,
		0x46, 0x63, 0xd0, 0x40, 0x34, 0x08, 0xf5, 0x47, 0x03, 0xd0, 0x50, 0x34,
		0x0c, 0x0d, 0x46, 0x43, 0xd0, 0x4c, 0x30, 0x0b, 0x4c, 0x07, 0x33, 0xc0,
		0x5c, 0x30, 0x0f, 0xcc, 0x06, 0x73, 0xc0, 0x44, 0x30, 0x09, 0x8c, 0x07,
		0x13, 0xc0, 0x54, 0x30, 0x0d, 0x4c, 0x06, 0x53, 0x80, 0xa5, 0xa5, 0x95,
		0x55, 0xdf, 0xbe, 0xfd, 0xfa, 0xd9, 0xda, 0xda, 0xd9, 0x59, 0x5b, 0xdb,
		0xd8, 0x18, 0x1b, 0x9b, 0x98, 0x18, 0x1a, 0x1a, 0x19, 0x99, 0x9b, 0x5b,
		0x58, 0x98, 0x9a, 0x9a, 0x99, 0x79, 0x7a, 0x7a, 0x79, 0xb9, 0xbb, 0x7b,
		0x78, 0xf8, 0xfa, 0xfa, 0xf9, 0x79, 0x7b, 0xfb, 0xf8, 0x38, 0x3a, 0x3a,
		0x39, 0xd9, 0xdb, 0x3b, 0x38, 0xb8, 0xba, 0xba, 0xb9, 0x39, 0x3b, 0xbb,
		0xb8, 0xa4, 0xa4, 0x24, 0x27, 0xa7, 0xa5, 0xa5, 0xa6, 0x26, 0x24, 0xc4,
		0xc7, 0x27, 0x25, 0x25, 0x26, 0xe6, 0xe4, 0x64, 0x67, 0xe7, 0xe5, 0xe5,
		0xe6, 0x66, 0x64, 0xa4, 0xa7, 0x67, 0x65, 0x65, 0x66, 0x86, 0x84, 0x04,
		0x07, 0x87, 0x85, 0x85, 0x86, 0x06, 0x04, 0xf8, 0xfb, 0x07, 0x05, 0x05,
		0x06, 0xc6, 0xc4, 0x44, 0x47, 0xc7, 0xc5, 0xc5, 0xc6, 0x46, 0x44, 0x84,
		0x87, 0x47, 0x45, 0x45, 0x46, 0x7e, 0x01, 0x9f, 0xc1, 0x37, 0xf0, 0x15,
		0x7c, 0x00, 0xef, 0xc1, 0x27, 0xf0, 0x11, 0xfc, 0x01, 0xbf, 0xc1, 0x3f,
		0xf0, 0x17, 0xfc, 0x00, 0xdf, 0xc1, 0x2f, 0xf0, 0x13, 0x3c, 0x41, 0x8f,
		0xd1, 0x33, 0xf4, 0x14, 0x3d, 0x40, 0xf7, 0xd1, 0x23, 0xf4, 0x10, 0xbd,
		0x41, 0xaf, 0xd1, 0x3b, 0xf4, 0x16, 0xbd, 0x40, 0xcf, 0xd1, 0x2b, 0xf4,
		0x12, 0x6d, 0x21, 0x36, 0x13, 0xdb, 0x88, 0xad, 0xc4, 0x06, 0x62, 0x3d,
		0xb1, 0x89, 0xd8, 0x48, 0xec, 0x21, 0x76, 0x13, 0xfb, 0x88, 0xbd, 0xc4,
		0x0e, 0x62, 0x3b, 0xb1, 0x8b, 0xd8, 0x49, 0x2c, 0x61, 0x2c, 0x66, 0x2c,
		0x63, 0x2c, 0x65, 0x2c, 0x60, 0xcc, 0x67, 0x2c, 0x62, 0x2c, 0x64, 0xac,
		0x61, 0xac, 0x66, 0xac, 0x63, 0xac, 0x65, 0xac, 0x60, 0x2c, 0x67, 0xac,
		0x62, 0xac, 0x64, 0x5c, 0x11, 0xba, 0x2c, 0x74, 0x4d, 0xe8, 0xaa, 0xd0,
		0x05, 0xa1, 0xf3, 0x42, 0x97, 0x84, 0x2e, 0x0a, 0xdd, 0x11, 0xba, 0x2d,
		0x74, 0x4f, 0xe8, 0xae, 0xd0, 0x0d, 0xa1, 0xeb, 0x42, 0xb7, 0x84, 0x6e,
		0x0a, 0x1d, 0x51, 0x76, 0x58, 0xd9, 0x31, 0x65, 0x47, 0x95, 0x1d, 0x50,
		0xb6, 0x5f, 0xd9, 0x21, 0x65, 0x07, 0x95, 0x9d, 0x51, 0x76, 0x5a, 0xd9,
		0x39, 0x65, 0x67, 0x95, 0x9d, 0x50, 0x76, 0x5c, 0xd9, 0x29, 0x65, 0x27,
		0x95, 0xfd, 0x07, 0x99, 0x62, 0x8e, 0x4f, 0x00, 0x20, 0x00, 0x00,
	})
	aLawDecodeTable = [256]int16{
		-5504, -5248, -6016, -5760, -4480, -4224, -4992, -4736,
		-7552, -7296, -8064, -7808, -6528, -6272, -7040, -6784,
		-2752, -2624, -3008, -2880, -2240, -2112, -2496, -2368,
		-3776, -3648, -4032, -3904, -3264, -3136, -3520, -3392,
		-22016, -20992, -24064, -23040, -17920, -16896, -19968, -18944,
		-30208, -29184, -32256, -31232, -26112, -25088, -28160, -27136,
		-11008, -10496, -12032, -11520, -8960, -8448, -9984, -9472,
		-15104, -14592, -16128, -15616, -13056, -12544, -14080, -13568,
		-344, -328, -376, -360, -280, -264, -312, -296,
		-472, -456, -504, -488, -408, -392, -440, -424,
		-88, -72, -120, -104, -24, -8, -56, -40,
		-216, -200, -248, -232, -152, -136, -184, -168,
		-1376, -1312, -1504, -1440, -1120, -1056, -1248, -1184,
		-1888, -1824, -2016, -1952, -1632, -1568, -1760, -1696,
		-688, -656, -752, -720, -560, -528, -624, -592,
		-944, -912, -1008, -976, -816, -784, -880, -848,

		5504, 5248, 6016, 5760, 4480, 4224, 4992, 4736,
		7552, 7296, 8064, 7808, 6528, 6272, 7040, 6784,
		2752, 2624, 3008, 2880, 2240, 2112, 2496, 2368,
		3776, 3648, 4032, 3904, 3264, 3136, 3520, 3392,
		22016, 20992, 24064, 23040, 17920, 16896, 19968, 18944,
		30208, 29184, 32256, 31232, 26112, 25088, 28160, 27136,
		11008, 10496, 12032, 11520, 8960, 8448, 9984, 9472,
		15104, 14592, 16128, 15616, 13056, 12544, 14080, 13568,
		344, 328, 376, 360, 280, 264, 312, 296,
		472, 456, 504, 488, 408, 392, 440, 424,
		88, 72, 120, 104, 24, 8, 56, 40,
		216, 200, 248, 232, 152, 136, 184, 168,
		1376, 1312, 1504, 1440, 1120, 1056, 1248, 1184,
		1888, 1824, 2016, 1952, 1632, 1568, 1760, 1696,
		688, 656, 752, 720, 560, 528, 624, 592,
		944, 912, 1008, 976, 816, 784, 880, 848,
	}
	aLawToΜLawTable = [256]byte{
		0x2a, 0x2b, 0x28, 0x29, 0x2e, 0x2f, 0x2c, 0x2d, 0x22, 0x23, 0x20, 0x21, 0x26, 0x27, 0x24, 0x25,
		0x39, 0x3a, 0x37, 0x38, 0x3d, 0x3e, 0x3b, 0x3c, 0x31, 0x32, 0x2f, 0x30, 0x35, 0x36, 0x33, 0x34,
		0x0a, 0x0b, 0x08, 0x09, 0x0e, 0x0f, 0x0c, 0x0d, 0x02, 0x03, 0x00, 0x01, 0x06, 0x07, 0x04, 0x05,
		0x1a, 0x1b, 0x18, 0x19, 0x1e, 0x1f, 0x1c, 0x1d, 0x12, 0x13, 0x10, 0x11, 0x16, 0x17, 0x14, 0x15,
		0x62, 0x63, 0x60, 0x61, 0x66, 0x67, 0x64, 0x65, 0x5d, 0x5d, 0x5c, 0x5c, 0x5f, 0x5f, 0x5e, 0x5e,
		0x74, 0x76, 0x70, 0x72, 0x7c, 0x7e, 0x78, 0x7a, 0x6a, 0x6b, 0x68, 0x69, 0x6e, 0x6f, 0x6c, 0x6d,
		0x48, 0x49, 0x46, 0x47, 0x4c, 0x4d, 0x4a, 0x4b, 0x40, 0x41, 0x3f, 0x3f, 0x44, 0x45, 0x42, 0x43,
		0x56, 0x57, 0x54, 0x55, 0x5a, 0x5b, 0x58, 0x59, 0x4f, 0x4f, 0x4e, 0x4e, 0x52, 0x53, 0x50, 0x51,
		0xaa, 0xab, 0xa8, 0xa9, 0xae, 0xaf, 0xac, 0xad, 0xa2, 0xa3, 0xa0, 0xa1, 0xa6, 0xa7, 0xa4, 0xa5,
		0xb9, 0xba, 0xb7, 0xb8, 0xbd, 0xbe, 0xbb, 0xbc, 0xb1, 0xb2, 0xaf, 0xb0, 0xb5, 0xb6, 0xb3, 0xb4,
		0x8a, 0x8b, 0x88, 0x89, 0x8e, 0x8f, 0x8c, 0x8d, 0x82, 0x83, 0x80, 0x81, 0x86, 0x87, 0x84, 0x85,
		0x9a, 0x9b, 0x98, 0x99, 0x9e, 0x9f, 0x9c, 0x9d, 0x92, 0x93, 0x90, 0x91, 0x96, 0x97, 0x94, 0x95,
		0xe2, 0xe3, 0xe0, 0xe1, 0xe6, 0xe7, 0xe4, 0xe5, 0xdd, 0xdd, 0xdc, 0xdc, 0xdf, 0xdf, 0xde, 0xde,
		0xf4, 0xf6, 0xf0, 0xf2, 0xfc, 0xfe, 0xf8, 0xfa, 0xea, 0xeb, 0xe8, 0xe9, 0xee, 0xef, 0xec, 0xed,
		0xc8, 0xc9, 0xc6, 0xc7, 0xcc, 0xcd, 0xca, 0xcb, 0xc0, 0xc1, 0xbf, 0xbf, 0xc4, 0xc5, 0xc2, 0xc3,
		0xd6, 0xd7, 0xd4, 0xd5, 0xda, 0xdb, 0xd8, 0xd9, 0xcf, 0xcf, 0xce, 0xce, 0xd2, 0xd3, 0xd0, 0xd1,
	}

	µLawEncodeTable = mustDecompress([]byte{
		0x1f, 0x8b, 0x08, 0x08, 0x27, 0x1d, 0x63, 0x5c, 0x02, 0x03, 0x75, 0x6c,
		0x61, 0x77, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x00, 0xed, 0xc1,
		0x43, 0x74, 0x18, 0x00, 0x0c, 0x00, 0xd0, 0xce, 0xb6, 0x6d, 0xdb, 0xb6,
		0x6d, 0xdb, 0xde, 0x6a, 0xb7, 0x6f, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
		0x36, 0xeb, 0x55, 0x5b, 0x0e, 0x39, 0xe5, 0xd0, 0x1c, 0x72, 0xc8, 0x21,
		0xfd, 0xdf, 0xc1, 0x21, 0x56, 0xcc, 0xe2, 0x18, 0x17, 0xd7, 0xb8, 0x78,
		0xc6, 0xc5, 0x37, 0x2e, 0x81, 0x71, 0x09, 0x8d, 0x4b, 0x64, 0x5c, 0x62,
		0xe3, 0x92, 0x18, 0x97, 0xd4, 0xb8, 0x64, 0xc6, 0x25, 0x37, 0x2e, 0x85,
		0x71, 0x29, 0x8d, 0x4b, 0x65, 0x5c, 0x6a, 0x65, 0x69, 0x94, 0xa5, 0x55,
		0x96, 0x4e, 0x59, 0x7a, 0x65, 0x19, 0x94, 0x65, 0x54, 0x96, 0x49, 0x59,
		0x66, 0x65, 0x59, 0x94, 0x65, 0x55, 0x96, 0x4d, 0x59, 0x76, 0x65, 0x39,
		0x94, 0xe5, 0x54, 0x96, 0x4b, 0x59, 0x6e, 0xa1, 0x3c, 0x42, 0x79, 0x85,
		0xf2, 0x09, 0xe5, 0x17, 0x2a, 0x20, 0x54, 0x50, 0xa8, 0x90, 0x50, 0x61,
		0xa1, 0x22, 0x42, 0x45, 0x85, 0x8a, 0x09, 0x15, 0x17, 0x2a, 0x21, 0x54,
		0x52, 0xa8, 0x94, 0x50, 0x69, 0x46, 0x19, 0x46, 0x59, 0x46, 0x39, 0x46,
		0x79, 0x46, 0x05, 0x46, 0x45, 0x46, 0x25, 0x46, 0x65, 0x46, 0x15, 0x46,
		0x55, 0x46, 0x35, 0x46, 0x75, 0x46, 0x0d, 0x46, 0x4d, 0x46, 0x2d, 0x46,
		0x6d, 0xa2, 0x0e, 0x51, 0x97, 0xa8, 0x47, 0xd4, 0x27, 0x1a, 0x10, 0x0d,
		0x89, 0x46, 0x44, 0x63, 0xa2, 0x09, 0xd1, 0x94, 0x68, 0x46, 0x34, 0x27,
		0x5a, 0x10, 0x2d, 0x89, 0x56, 0x44, 0x6b, 0xd4, 0x06, 0xb5, 0x45, 0xed,
		0x50, 0x7b, 0xd4, 0x01, 0x75, 0x44, 0x9d, 0x50, 0x67, 0xd4, 0x05, 0x75,
		0x45, 0xdd, 0x50, 0x77, 0xd4, 0x03, 0xf5, 0x44, 0xbd, 0x50, 0x6f, 0xd0,
		0x07, 0xf4, 0x05, 0xfd, 0x40, 0x7f, 0x30, 0x00, 0x0c, 0x04, 0x83, 0xc0,
		0x60, 0x30, 0x04, 0x0c, 0x05, 0xc3, 0xc0, 0x70, 0x30, 0x02, 0x8c, 0x04,
		0xa3, 0x80, 0xa3, 0xa3, 0x93, 0x93, 0xb3, 0xb3, 0x8b, 0x8b, 0xab, 0xab,
		0x9b, 0x9b, 0xbb, 0xbb, 0x87, 0x87, 0xa7, 0xa7, 0x97, 0x97, 0xb7, 0xb7,
		0x8f, 0x8f, 0xaf, 0xaf, 0x9f, 0x9f, 0xbf, 0xff, 0xbf, 0xe8, 0xe8, 0xa8,
		0xa8, 0xc8, 0xc8, 0x88, 0x88, 0xf0, 0xf0, 0xbf, 0x7f, 0xc3, 0xc2, 0x42,
		0x43, 0x43, 0x42, 0x82, 0x83, 0x83, 0x82, 0x02, 0x03, 0x03, 0x02, 0xfe,
		0xfc, 0xf9, 0xfd, 0xfb, 0x17, 0xf8, 0x09, 0x7e, 0x80, 0xef, 0xe0, 0x1b,
		0xf8, 0x0a, 0xbe, 0x80, 0xcf, 0xe0, 0x13, 0xf8, 0x08, 0x3e, 0x80, 0xf7,
		0xe0, 0x1d, 0x78, 0x0b, 0xde, 0x80, 0xd7, 0xe0, 0x15, 0x7a, 0x89, 0x5e,
		0xa0, 0xe7, 0xe8, 0x19, 0x7a, 0x8a, 0x9e, 0xa0, 0xc7, 0xe8, 0x11, 0x7a,
		0x88, 0x1e, 0xa0, 0xfb, 0xe8, 0x1e, 0xba, 0x8b, 0xee, 0xa0, 0xdb, 0xe8,
		0x16, 0x71, 0x93, 0xb8, 0x41, 0x5c, 0x27, 0xae, 0x11, 0x57, 0x89, 0x2b,
		0xc4, 0x65, 0xe2, 0x12, 0x71, 0x91, 0xb8, 0x40, 0x9c, 0x27, 0xce, 0x11,
		0x67, 0x89, 0x33, 0xc4, 0x69, 0xe2, 0x14, 0xe3, 0x24, 0xe3, 0x04, 0xe3,
		0x38, 0xe3, 0x18, 0xe3, 0x28, 0xe3, 0x08, 0xe3, 0x30, 0xe3, 0x10, 0xe3,
		0x20, 0xe3, 0x00, 0x63, 0x3f, 0x63, 0x1f, 0x63, 0x2f, 0x63, 0x0f, 0x63,
		0x37, 0x63, 0x97, 0xd0, 0x4e, 0xa1, 0x1d, 0x42, 0xdb, 0x85, 0xb6, 0x09,
		0x6d, 0x15, 0xda, 0x22, 0xb4, 0x59, 0x68, 0x93, 0xd0, 0x46, 0xa1, 0x0d,
		0x42, 0xeb, 0x85, 0xd6, 0x09, 0xad, 0x15, 0x5a, 0x23, 0xb4, 0x5a, 0x68,
		0x95, 0xb2, 0x95, 0xca, 0x56, 0x28, 0x5b, 0xae, 0x6c, 0x99, 0xb2, 0xa5,
		0xca, 0x96, 0x28, 0x5b, 0xac, 0x6c, 0x91, 0xb2, 0x85, 0xca, 0x16, 0x28,
		0x9b, 0xaf, 0x6c, 0x9e, 0xb2, 0xb9, 0xca, 0xe6, 0x28, 0x9b, 0xad, 0x6c,
		0x96, 0x71, 0x33, 0x8d, 0x9b, 0x61, 0xdc, 0x74, 0xe3, 0xa6, 0x19, 0x37,
		0xd5, 0xb8, 0x29, 0xc6, 0x4d, 0x36, 0x6e, 0x92, 0x71, 0x13, 0x8d, 0x9b,
		0x60, 0xdc, 0x78, 0xe3, 0xc6, 0x19, 0x37, 0xd6, 0xb8, 0x31, 0xc6, 0x8d,
		0x8e, 0x15, 0xb3, 0xff, 0xf1, 0x7f, 0xd2, 0xaf, 0x00, 0x40, 0x00, 0x00,
	})
	µLawDecodeTable = [256]int16{
		-32124, -31100, -30076, -29052, -28028, -27004, -25980, -24956,
		-23932, -22908, -21884, -20860, -19836, -18812, -17788, -16764,
		-15996, -15484, -14972, -14460, -13948, -13436, -12924, -12412,
		-11900, -11388, -10876, -10364, -9852, -9340, -8828, -8316,
		-7932, -7676, -7420, -7164, -6908, -6652, -6396, -6140,
		-5884, -5628, -5372, -5116, -4860, -4604, -4348, -4092,
		-3900, -3772, -3644, -3516, -3388, -3260, -3132, -3004,
		-2876, -2748, -2620, -2492, -2364, -2236, -2108, -1980,
		-1884, -1820, -1756, -1692, -1628, -1564, -1500, -1436,
		-1372, -1308, -1244, -1180, -1116, -1052, -988, -924,
		-876, -844, -812, -780, -748, -716, -684, -652,
		-620, -588, -556, -524, -492, -460, -428, -396,
		-372, -356, -340, -324, -308, -292, -276, -260,
		-244, -228, -212, -196, -180, -164, -148, -132,
		-120, -112, -104, -96, -88, -80, -72, -64,
		-56, -48, -40, -32, -24, -16, -8, 0,

		32124, 31100, 30076, 29052, 28028, 27004, 25980, 24956,
		23932, 22908, 21884, 20860, 19836, 18812, 17788, 16764,
		15996, 15484, 14972, 14460, 13948, 13436, 12924, 12412,
		11900, 11388, 10876, 10364, 9852, 9340, 8828, 8316,
		7932, 7676, 7420, 7164, 6908, 6652, 6396, 6140,
		5884, 5628, 5372, 5116, 4860, 4604, 4348, 4092,
		3900, 3772, 3644, 3516, 3388, 3260, 3132, 3004,
		2876, 2748, 2620, 2492, 2364, 2236, 2108, 1980,
		1884, 1820, 1756, 1692, 1628, 1564, 1500, 1436,
		1372, 1308, 1244, 1180, 1116, 1052, 988, 924,
		876, 844, 812, 780, 748, 716, 684, 652,
		620, 588, 556, 524, 492, 460, 428, 396,
		372, 356, 340, 324, 308, 292, 276, 260,
		244, 228, 212, 196, 180, 164, 148, 132,
		120, 112, 104, 96, 88, 80, 72, 64,
		56, 48, 40, 32, 24, 16, 8, 0,
	}
	µLawToAlawTable = [256]byte{
		0x2a, 0x2b, 0x28, 0x29, 0x2e, 0x2f, 0x2c, 0x2d, 0x22, 0x23, 0x20, 0x21, 0x26, 0x27, 0x24, 0x25,
		0x3a, 0x3b, 0x38, 0x39, 0x3e, 0x3f, 0x3c, 0x3d, 0x32, 0x33, 0x30, 0x31, 0x36, 0x37, 0x34, 0x35,
		0x0a, 0x0b, 0x08, 0x09, 0x0e, 0x0f, 0x0c, 0x0d, 0x02, 0x03, 0x00, 0x01, 0x06, 0x07, 0x04, 0x1a,
		0x1b, 0x18, 0x19, 0x1e, 0x1f, 0x1c, 0x1d, 0x12, 0x13, 0x10, 0x11, 0x16, 0x17, 0x14, 0x15, 0x6a,
		0x68, 0x69, 0x6e, 0x6f, 0x6c, 0x6d, 0x62, 0x63, 0x60, 0x61, 0x66, 0x67, 0x64, 0x65, 0x7a, 0x78,
		0x7e, 0x7f, 0x7c, 0x7d, 0x72, 0x73, 0x70, 0x71, 0x76, 0x77, 0x74, 0x75, 0x4b, 0x49, 0x4f, 0x4d,
		0x42, 0x43, 0x40, 0x41, 0x46, 0x47, 0x44, 0x45, 0x5a, 0x5b, 0x58, 0x59, 0x5e, 0x5f, 0x5c, 0x5d,
		0x52, 0x52, 0x53, 0x53, 0x50, 0x50, 0x51, 0x51, 0x56, 0x56, 0x57, 0x57, 0x54, 0x54, 0x55, 0x55,
		0xaa, 0xab, 0xa8, 0xa9, 0xae, 0xaf, 0xac, 0xad, 0xa2, 0xa3, 0xa0, 0xa1, 0xa6, 0xa7, 0xa4, 0xa5,
		0xba, 0xbb, 0xb8, 0xb9, 0xbe, 0xbf, 0xbc, 0xbd, 0xb2, 0xb3, 0xb0, 0xb1, 0xb6, 0xb7, 0xb4, 0xb5,
		0x8a, 0x8b, 0x88, 0x89, 0x8e, 0x8f, 0x8c, 0x8d, 0x82, 0x83, 0x80, 0x81, 0x86, 0x87, 0x84, 0x9a,
		0x9b, 0x98, 0x99, 0x9e, 0x9f, 0x9c, 0x9d, 0x92, 0x93, 0x90, 0x91, 0x96, 0x97, 0x94, 0x95, 0xea,
		0xe8, 0xe9, 0xee, 0xef, 0xec, 0xed, 0xe2, 0xe3, 0xe0, 0xe1, 0xe6, 0xe7, 0xe4, 0xe5, 0xfa, 0xf8,
		0xfe, 0xff, 0xfc, 0xfd, 0xf2, 0xf3, 0xf0, 0xf1, 0xf6, 0xf7, 0xf4, 0xf5, 0xcb, 0xc9, 0xcf, 0xcd,
		0xc2, 0xc3, 0xc0, 0xc1, 0xc6, 0xc7, 0xc4, 0xc5, 0xda, 0xdb, 0xd8, 0xd9, 0xde, 0xdf, 0xdc, 0xdd,
		0xd2, 0xd2, 0xd3, 0xd3, 0xd0, 0xd0, 0xd1, 0xd1, 0xd6, 0xd6, 0xd7, 0xd7, 0xd4, 0xd4, 0xd5, 0xd5,
	}
)
